{"version":3,"sources":["Components/NewTaskForm.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["NewTask","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","priority","description","handleInputChange","bind","assertThisInitialized","handleSubmit","e","preventDefault","props","onAddToDo","setState","_e$target","target","value","name","console","log","defineProperty","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","App","toDo","ToDo","handleAddToDo","task","filter","i","toConsumableArray","concat","_this2","map","key","onClick","deleteTask","length","src","logo","alt","NewTaskForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ae9fe0d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NewTask extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: '',\n      responsible: '',\n      priority: 'low',\n      description: ''\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  //function to submit the new task\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onAddToDo(this.state);\n    this.setState({\n      title: '',\n      responsible: '',\n      priority: 'low',\n      description: ''\n    });\n  }\n\n  handleInputChange(e) {\n    const { value, name } = e.target;\n    console.log(value, name);\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"form\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={this.state.title}\n            onChange={this.handleInputChange}\n            placeholder=\"New Task\"\n          />\n          <input\n            type=\"text\"\n            name=\"responsible\"\n            value={this.state.responsible}\n            onChange={this.handleInputChange}\n            placeholder=\"Responsible\"\n          />\n          <input\n            type=\"text\"\n            name=\"description\"\n            value={this.state.description}\n            onChange={this.handleInputChange}\n            placeholder=\"Description\"\n          />\n          <select\n            name=\"priority\"\n            value={this.state.priority}\n            onChange={this.handleInputChange}\n          >\n            <option>low</option>\n            <option>medium</option>\n            <option>high</option>\n          </select>\n          <button type=\"submit\">Save</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewTask;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//data from .json\nimport { ToDo } from './data.json';\nimport NewTask from './Components/NewTaskForm';\n//console.log(ToDo);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      toDo: ToDo\n    };\n    this.handleAddToDo = this.handleAddToDo.bind(this);\n  }\n\n  //function to delete one by one task\n  deleteTask(task) {\n    this.setState({\n      toDo: this.state.toDo.filter((e, i) => {\n        return i !== task;\n      })\n    });\n  }\n  //function sended by props\n  handleAddToDo(task) {\n    this.setState({\n      toDo: [...this.state.toDo, task]\n    });\n  }\n  render() {\n    console.log(toDo);\n    const toDo = this.state.toDo.map((task, i) => {\n      return (\n        <div className=\"item\" key={i}>\n          <div>\n            {' '}\n            <h3>Task: {task.title}</h3>\n          </div>\n\n          <div>\n            <h4>\n              Priority:\n              {task.priority}\n            </h4>{' '}\n          </div>\n\n          <div>\n            {' '}\n            <h4>\n              Responsible:\n              {task.responsible}\n            </h4>{' '}\n          </div>\n\n          <div>\n            <h5>\n              Description:\n              {task.description}\n            </h5>{' '}\n          </div>\n\n          <div>\n            {' '}\n            <button onClick={this.deleteTask.bind(this, i)}>Delete</button>\n          </div>\n        </div>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Today Vania's ToDo List </h1>\n          <div className=\"total\">\n            <h2>Tasks: {this.state.toDo.length}</h2>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n        </header>\n        <NewTask onAddToDo={this.handleAddToDo} />\n        <div className=\"container\">{toDo}</div>\n        <div className=\"footer\">Vania Ram√≠rez 2018</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}